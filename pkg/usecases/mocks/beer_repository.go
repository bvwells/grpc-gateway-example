// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/bvwells/grpc-gateway-example/pkg/domain"
	mock "github.com/stretchr/testify/mock"
)

// BeerRepository is an autogenerated mock type for the BeerRepository type
type BeerRepository struct {
	mock.Mock
}

// CreateBeer provides a mock function with given fields: ctx, params
func (_m *BeerRepository) CreateBeer(ctx context.Context, params *domain.CreateBeerParams) (*domain.Beer, error) {
	ret := _m.Called(ctx, params)

	var r0 *domain.Beer
	if rf, ok := ret.Get(0).(func(context.Context, *domain.CreateBeerParams) *domain.Beer); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Beer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.CreateBeerParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBeer provides a mock function with given fields: ctx, params
func (_m *BeerRepository) DeleteBeer(ctx context.Context, params *domain.DeleteBeerParams) error {
	ret := _m.Called(ctx, params)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.DeleteBeerParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBeer provides a mock function with given fields: ctx, params
func (_m *BeerRepository) GetBeer(ctx context.Context, params *domain.GetBeerParams) (*domain.Beer, error) {
	ret := _m.Called(ctx, params)

	var r0 *domain.Beer
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetBeerParams) *domain.Beer); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Beer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetBeerParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBeers provides a mock function with given fields: ctx, params
func (_m *BeerRepository) GetBeers(ctx context.Context, params *domain.GetBeersParams) ([]*domain.Beer, error) {
	ret := _m.Called(ctx, params)

	var r0 []*domain.Beer
	if rf, ok := ret.Get(0).(func(context.Context, *domain.GetBeersParams) []*domain.Beer); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Beer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.GetBeersParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBeer provides a mock function with given fields: ctx, params
func (_m *BeerRepository) UpdateBeer(ctx context.Context, params *domain.UpdateBeerParams) (*domain.Beer, error) {
	ret := _m.Called(ctx, params)

	var r0 *domain.Beer
	if rf, ok := ret.Get(0).(func(context.Context, *domain.UpdateBeerParams) *domain.Beer); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Beer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.UpdateBeerParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
