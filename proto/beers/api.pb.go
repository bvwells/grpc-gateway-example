// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0
// 	protoc        v3.11.4
// source: api.proto

package beers

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Type int32

const (
	Type_UNKNOWN        Type = 0
	Type_ALE            Type = 1
	Type_BITTER         Type = 2
	Type_LAGER          Type = 3
	Type_INDIA_PALE_ALE Type = 4
	Type_STOUT          Type = 5
	Type_PILSNER        Type = 6
	Type_PORTER         Type = 7
	Type_PALE_ALE       Type = 8
)

// Enum value maps for Type.
var (
	Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "ALE",
		2: "BITTER",
		3: "LAGER",
		4: "INDIA_PALE_ALE",
		5: "STOUT",
		6: "PILSNER",
		7: "PORTER",
		8: "PALE_ALE",
	}
	Type_value = map[string]int32{
		"UNKNOWN":        0,
		"ALE":            1,
		"BITTER":         2,
		"LAGER":          3,
		"INDIA_PALE_ALE": 4,
		"STOUT":          5,
		"PILSNER":        6,
		"PORTER":         7,
		"PALE_ALE":       8,
	}
)

func (x Type) Enum() *Type {
	p := new(Type)
	*p = x
	return p
}

func (x Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Type) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[0].Descriptor()
}

func (Type) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[0]
}

func (x Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Type.Descriptor instead.
func (Type) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{0}
}

type Beer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type    Type   `protobuf:"varint,3,opt,name=type,proto3,enum=Type" json:"type,omitempty"`
	Brewer  string `protobuf:"bytes,4,opt,name=brewer,proto3" json:"brewer,omitempty"`
	Country string `protobuf:"bytes,5,opt,name=country,proto3" json:"country,omitempty"`
}

func (x *Beer) Reset() {
	*x = Beer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Beer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Beer) ProtoMessage() {}

func (x *Beer) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Beer.ProtoReflect.Descriptor instead.
func (*Beer) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{0}
}

func (x *Beer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Beer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Beer) GetType() Type {
	if x != nil {
		return x.Type
	}
	return Type_UNKNOWN
}

func (x *Beer) GetBrewer() string {
	if x != nil {
		return x.Brewer
	}
	return ""
}

func (x *Beer) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

type CreateBeerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type    Type   `protobuf:"varint,2,opt,name=type,proto3,enum=Type" json:"type,omitempty"`
	Brewer  string `protobuf:"bytes,3,opt,name=brewer,proto3" json:"brewer,omitempty"`
	Country string `protobuf:"bytes,4,opt,name=country,proto3" json:"country,omitempty"`
}

func (x *CreateBeerRequest) Reset() {
	*x = CreateBeerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBeerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBeerRequest) ProtoMessage() {}

func (x *CreateBeerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBeerRequest.ProtoReflect.Descriptor instead.
func (*CreateBeerRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{1}
}

func (x *CreateBeerRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateBeerRequest) GetType() Type {
	if x != nil {
		return x.Type
	}
	return Type_UNKNOWN
}

func (x *CreateBeerRequest) GetBrewer() string {
	if x != nil {
		return x.Brewer
	}
	return ""
}

func (x *CreateBeerRequest) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

type CreateBeerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Beer *Beer `protobuf:"bytes,1,opt,name=beer,proto3" json:"beer,omitempty"`
}

func (x *CreateBeerResponse) Reset() {
	*x = CreateBeerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBeerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBeerResponse) ProtoMessage() {}

func (x *CreateBeerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBeerResponse.ProtoReflect.Descriptor instead.
func (*CreateBeerResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{2}
}

func (x *CreateBeerResponse) GetBeer() *Beer {
	if x != nil {
		return x.Beer
	}
	return nil
}

type GetBeerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetBeerRequest) Reset() {
	*x = GetBeerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBeerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBeerRequest) ProtoMessage() {}

func (x *GetBeerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBeerRequest.ProtoReflect.Descriptor instead.
func (*GetBeerRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{3}
}

func (x *GetBeerRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetBeerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Beer *Beer `protobuf:"bytes,1,opt,name=beer,proto3" json:"beer,omitempty"`
}

func (x *GetBeerResponse) Reset() {
	*x = GetBeerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBeerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBeerResponse) ProtoMessage() {}

func (x *GetBeerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBeerResponse.ProtoReflect.Descriptor instead.
func (*GetBeerResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{4}
}

func (x *GetBeerResponse) GetBeer() *Beer {
	if x != nil {
		return x.Beer
	}
	return nil
}

type UpdateBeerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Beer *Beer `protobuf:"bytes,1,opt,name=beer,proto3" json:"beer,omitempty"`
	// Indicates which fields in the provided beer to update. Must be
	// specified and non-empty.
	UpdateMask *field_mask.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateBeerRequest) Reset() {
	*x = UpdateBeerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBeerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBeerRequest) ProtoMessage() {}

func (x *UpdateBeerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBeerRequest.ProtoReflect.Descriptor instead.
func (*UpdateBeerRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateBeerRequest) GetBeer() *Beer {
	if x != nil {
		return x.Beer
	}
	return nil
}

func (x *UpdateBeerRequest) GetUpdateMask() *field_mask.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type UpdateBeerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Beer *Beer `protobuf:"bytes,1,opt,name=beer,proto3" json:"beer,omitempty"`
}

func (x *UpdateBeerResponse) Reset() {
	*x = UpdateBeerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBeerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBeerResponse) ProtoMessage() {}

func (x *UpdateBeerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBeerResponse.ProtoReflect.Descriptor instead.
func (*UpdateBeerResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateBeerResponse) GetBeer() *Beer {
	if x != nil {
		return x.Beer
	}
	return nil
}

type DeleteBeerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteBeerRequest) Reset() {
	*x = DeleteBeerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBeerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBeerRequest) ProtoMessage() {}

func (x *DeleteBeerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBeerRequest.ProtoReflect.Descriptor instead.
func (*DeleteBeerRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteBeerRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteBeerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteBeerResponse) Reset() {
	*x = DeleteBeerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBeerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBeerResponse) ProtoMessage() {}

func (x *DeleteBeerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBeerResponse.ProtoReflect.Descriptor instead.
func (*DeleteBeerResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{8}
}

type GetBeersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetBeersRequest) Reset() {
	*x = GetBeersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBeersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBeersRequest) ProtoMessage() {}

func (x *GetBeersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBeersRequest.ProtoReflect.Descriptor instead.
func (*GetBeersRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{9}
}

type GetBeersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Beers []*Beer `protobuf:"bytes,1,rep,name=beers,proto3" json:"beers,omitempty"`
}

func (x *GetBeersResponse) Reset() {
	*x = GetBeersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBeersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBeersResponse) ProtoMessage() {}

func (x *GetBeersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBeersResponse.ProtoReflect.Descriptor instead.
func (*GetBeersResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{10}
}

func (x *GetBeersResponse) GetBeers() []*Beer {
	if x != nil {
		return x.Beers
	}
	return nil
}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{11}
}

func (x *Error) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_api_proto protoreflect.FileDescriptor

var file_api_proto_rawDesc = []byte{
	0x0a, 0x09, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd4, 0x02, 0x0a, 0x04, 0x42, 0x65,
	0x65, 0x72, 0x12, 0x37, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27,
	0x92, 0x41, 0x24, 0x32, 0x22, 0x54, 0x68, 0x65, 0x20, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x62, 0x65, 0x65, 0x72, 0x2e, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x32, 0x15,
	0x54, 0x68, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x62, 0x65, 0x65, 0x72, 0x2e, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x05, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x1a, 0x92, 0x41, 0x17, 0x32, 0x15, 0x54, 0x68, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x65, 0x65, 0x72, 0x2e, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x62, 0x72, 0x65, 0x77, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x32, 0x17, 0x54, 0x68, 0x65, 0x20, 0x62, 0x72, 0x65,
	0x77, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x65, 0x65, 0x72, 0x2e,
	0x52, 0x06, 0x62, 0x72, 0x65, 0x77, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x32, 0x25,
	0x54, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x62, 0x65, 0x65, 0x6e, 0x20, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x20,
	0x66, 0x72, 0x6f, 0x6d, 0x2e, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x3a, 0x30,
	0x92, 0x41, 0x2d, 0x0a, 0x2b, 0x2a, 0x04, 0x42, 0x65, 0x65, 0x72, 0x32, 0x17, 0x41, 0x20, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x62,
	0x65, 0x65, 0x72, 0x2e, 0xd2, 0x01, 0x02, 0x69, 0x64, 0xd2, 0x01, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0xb5, 0x02, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x65, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x32, 0x15, 0x54, 0x68, 0x65, 0x20, 0x6e,
	0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x65, 0x65, 0x72, 0x2e,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x05, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x1a, 0x92, 0x41, 0x17,
	0x32, 0x15, 0x54, 0x68, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x62, 0x65, 0x65, 0x72, 0x2e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a,
	0x06, 0x62, 0x72, 0x65, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92,
	0x41, 0x19, 0x32, 0x17, 0x54, 0x68, 0x65, 0x20, 0x62, 0x72, 0x65, 0x77, 0x65, 0x72, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x65, 0x65, 0x72, 0x2e, 0x52, 0x06, 0x62, 0x72, 0x65,
	0x77, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x32, 0x25, 0x54, 0x68, 0x65, 0x20, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x20,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x2e,
	0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x3a, 0x3d, 0x92, 0x41, 0x3a, 0x0a, 0x38,
	0x2a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x32, 0x1c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x62, 0x65, 0x65, 0x72,
	0x2e, 0xd2, 0x01, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x65, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x31, 0x0a, 0x04, 0x62, 0x65, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e,
	0x42, 0x65, 0x65, 0x72, 0x42, 0x16, 0x92, 0x41, 0x13, 0x32, 0x11, 0x54, 0x68, 0x65, 0x20, 0x62,
	0x65, 0x65, 0x72, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x52, 0x04, 0x62, 0x65,
	0x65, 0x72, 0x3a, 0x40, 0x92, 0x41, 0x3d, 0x0a, 0x3b, 0x2a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x42, 0x65, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x1e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x62, 0x65, 0x65, 0x72, 0x2e, 0xd2, 0x01, 0x04,
	0x62, 0x65, 0x65, 0x72, 0x22, 0x74, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x42, 0x65, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x32, 0x0f, 0x42, 0x65, 0x65, 0x72, 0x20, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0xd2, 0x01, 0x02, 0x69, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x3a, 0x37, 0x92, 0x41, 0x34, 0x0a, 0x32, 0x2a, 0x0e, 0x47, 0x65, 0x74, 0x42, 0x65, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x1b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x67, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20,
	0x62, 0x65, 0x65, 0x72, 0x2e, 0xd2, 0x01, 0x02, 0x69, 0x64, 0x22, 0x7a, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x42, 0x65, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a,
	0x04, 0x62, 0x65, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x42, 0x65,
	0x65, 0x72, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0x54, 0x68, 0x65, 0x20, 0x62, 0x65, 0x65,
	0x72, 0x2e, 0x52, 0x04, 0x62, 0x65, 0x65, 0x72, 0x3a, 0x3c, 0x92, 0x41, 0x39, 0x0a, 0x37, 0x2a,
	0x0f, 0x47, 0x65, 0x74, 0x42, 0x65, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x32, 0x1d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20,
	0x67, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x62, 0x65, 0x65, 0x72, 0x2e, 0xd2,
	0x01, 0x04, 0x62, 0x65, 0x65, 0x72, 0x22, 0xad, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x04,
	0x62, 0x65, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x42, 0x65, 0x65,
	0x72, 0x52, 0x04, 0x62, 0x65, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4d, 0x61, 0x73, 0x6b, 0x3a, 0x40, 0x92, 0x41, 0x3d, 0x0a, 0x3b, 0x2a, 0x11, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x1c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x62, 0x65, 0x65, 0x72, 0x2e, 0xd2, 0x01, 0x07, 0x62,
	0x65, 0x65, 0x72, 0x2e, 0x69, 0x64, 0x22, 0x89, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x65, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a,
	0x04, 0x62, 0x65, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x42, 0x65,
	0x65, 0x72, 0x42, 0x16, 0x92, 0x41, 0x13, 0x32, 0x11, 0x54, 0x68, 0x65, 0x20, 0x62, 0x65, 0x65,
	0x72, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x52, 0x04, 0x62, 0x65, 0x65, 0x72,
	0x3a, 0x40, 0x92, 0x41, 0x3d, 0x0a, 0x3b, 0x2a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42,
	0x65, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x1e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x62, 0x65, 0x65, 0x72, 0x2e, 0xd2, 0x01, 0x04, 0x62, 0x65,
	0x65, 0x72, 0x22, 0x7b, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x65, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x32, 0x0f, 0x42, 0x65, 0x65, 0x72, 0x20, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0xd2, 0x01, 0x02, 0x69, 0x64, 0x52, 0x02,
	0x69, 0x64, 0x3a, 0x3b, 0x92, 0x41, 0x38, 0x0a, 0x36, 0x2a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x42, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x1c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x20, 0x61, 0x20, 0x62, 0x65, 0x65, 0x72, 0x2e, 0xd2, 0x01, 0x02, 0x69, 0x64, 0x22,
	0x4f, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x65, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x39, 0x92, 0x41, 0x36, 0x0a, 0x34, 0x2a, 0x12, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x65, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x32, 0x1e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x62, 0x65, 0x65, 0x72, 0x2e,
	0x22, 0x44, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x42, 0x65, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x3a, 0x31, 0x92, 0x41, 0x2e, 0x0a, 0x2c, 0x2a, 0x0f, 0x47, 0x65, 0x74, 0x42,
	0x65, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x19, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x67, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x20, 0x62, 0x65, 0x65, 0x72, 0x2e, 0x22, 0x7f, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x42, 0x65, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x62, 0x65,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x42, 0x65, 0x65, 0x72,
	0x42, 0x0f, 0x92, 0x41, 0x0c, 0x32, 0x0a, 0x54, 0x68, 0x65, 0x20, 0x62, 0x65, 0x65, 0x72, 0x73,
	0x2e, 0x52, 0x05, 0x62, 0x65, 0x65, 0x72, 0x73, 0x3a, 0x3d, 0x92, 0x41, 0x3a, 0x0a, 0x38, 0x2a,
	0x10, 0x47, 0x65, 0x74, 0x42, 0x65, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x32, 0x1c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x66, 0x72, 0x6f, 0x6d,
	0x20, 0x67, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x20, 0x62, 0x65, 0x65, 0x72, 0x2e, 0xd2,
	0x01, 0x05, 0x62, 0x65, 0x65, 0x72, 0x73, 0x22, 0x62, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x27, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x13,
	0x92, 0x41, 0x10, 0x32, 0x0e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0x92, 0x41, 0x13, 0x32,
	0x11, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2a, 0x79, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x49, 0x54,
	0x54, 0x45, 0x52, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x41, 0x47, 0x45, 0x52, 0x10, 0x03,
	0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x44, 0x49, 0x41, 0x5f, 0x50, 0x41, 0x4c, 0x45, 0x5f, 0x41,
	0x4c, 0x45, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x54, 0x4f, 0x55, 0x54, 0x10, 0x05, 0x12,
	0x0b, 0x0a, 0x07, 0x50, 0x49, 0x4c, 0x53, 0x4e, 0x45, 0x52, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06,
	0x50, 0x4f, 0x52, 0x54, 0x45, 0x52, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x41, 0x4c, 0x45,
	0x5f, 0x41, 0x4c, 0x45, 0x10, 0x08, 0x32, 0xcb, 0x0b, 0x0a, 0x0b, 0x42, 0x65, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xf1, 0x01, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x42, 0x65, 0x65, 0x72, 0x12, 0x12, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x65,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x65, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb9,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x22, 0x0d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x62, 0x65, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x9d, 0x01, 0x0a, 0x04, 0x62,
	0x65, 0x65, 0x72, 0x12, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x62, 0x65,
	0x65, 0x72, 0x2e, 0x2a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x65, 0x65, 0x72, 0x4a,
	0x0b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x4a, 0x21, 0x0a, 0x03,
	0x34, 0x30, 0x31, 0x12, 0x1a, 0x0a, 0x0c, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x64, 0x12, 0x0a, 0x0a, 0x08, 0x1a, 0x06, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4a,
	0x1e, 0x0a, 0x03, 0x34, 0x30, 0x33, 0x12, 0x17, 0x0a, 0x09, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64,
	0x64, 0x65, 0x6e, 0x12, 0x0a, 0x0a, 0x08, 0x1a, 0x06, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4a,
	0x29, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x10, 0x55, 0x6e,
	0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x0a,
	0x0a, 0x08, 0x1a, 0x06, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0xba, 0x02, 0x0a, 0x07, 0x47,
	0x65, 0x74, 0x42, 0x65, 0x65, 0x72, 0x12, 0x0f, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x65, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x65, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8b, 0x02, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x14, 0x12, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x65, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x92, 0x41, 0xed, 0x01, 0x0a, 0x04, 0x62, 0x65, 0x65, 0x72,
	0x12, 0x1f, 0x47, 0x65, 0x74, 0x20, 0x62, 0x65, 0x65, 0x72, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20,
	0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x2e, 0x2a, 0x07, 0x67, 0x65, 0x74, 0x42, 0x65, 0x65, 0x72, 0x4a, 0x0b, 0x0a, 0x03, 0x32, 0x30,
	0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x4a, 0x20, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x19,
	0x0a, 0x0b, 0x42, 0x61, 0x64, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0a, 0x0a,
	0x08, 0x1a, 0x06, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4a, 0x21, 0x0a, 0x03, 0x34, 0x30, 0x31,
	0x12, 0x1a, 0x0a, 0x0c, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64,
	0x12, 0x0a, 0x0a, 0x08, 0x1a, 0x06, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4a, 0x1e, 0x0a, 0x03,
	0x34, 0x30, 0x33, 0x12, 0x17, 0x0a, 0x09, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x12, 0x0a, 0x0a, 0x08, 0x1a, 0x06, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4a, 0x1e, 0x0a, 0x03,
	0x34, 0x30, 0x34, 0x12, 0x17, 0x0a, 0x09, 0x4e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64,
	0x12, 0x0a, 0x0a, 0x08, 0x1a, 0x06, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4a, 0x29, 0x0a, 0x07,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x10, 0x55, 0x6e, 0x65, 0x78, 0x70,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x0a, 0x0a, 0x08, 0x1a,
	0x06, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0xd4, 0x02, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x65, 0x65, 0x72, 0x12, 0x12, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42,
	0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x65, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x9c, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x32, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x62, 0x65, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x62, 0x65, 0x65, 0x72, 0x2e, 0x69, 0x64,
	0x7d, 0x3a, 0x04, 0x62, 0x65, 0x65, 0x72, 0x92, 0x41, 0xf3, 0x01, 0x0a, 0x04, 0x62, 0x65, 0x65,
	0x72, 0x12, 0x22, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x62, 0x65, 0x65, 0x72, 0x20, 0x77,
	0x69, 0x74, 0x68, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x2e, 0x2a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x65, 0x65,
	0x72, 0x4a, 0x0b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x4a, 0x20,
	0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x19, 0x0a, 0x0b, 0x42, 0x61, 0x64, 0x20, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0a, 0x0a, 0x08, 0x1a, 0x06, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x4a, 0x21, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x1a, 0x0a, 0x0c, 0x55, 0x6e, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x0a, 0x0a, 0x08, 0x1a, 0x06, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x4a, 0x1e, 0x0a, 0x03, 0x34, 0x30, 0x33, 0x12, 0x17, 0x0a, 0x09, 0x46, 0x6f,
	0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x0a, 0x0a, 0x08, 0x1a, 0x06, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x4a, 0x1e, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x17, 0x0a, 0x09, 0x4e, 0x6f,
	0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x0a, 0x0a, 0x08, 0x1a, 0x06, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x4a, 0x29, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x1e,
	0x0a, 0x10, 0x55, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x0a, 0x0a, 0x08, 0x1a, 0x06, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0xc9,
	0x02, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x65, 0x65, 0x72, 0x12, 0x12, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x13, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x65, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x91, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x2a,
	0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x65, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x92, 0x41, 0xf3, 0x01, 0x0a, 0x04, 0x62, 0x65, 0x65, 0x72, 0x12, 0x22, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x62, 0x65, 0x65, 0x72, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20,
	0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x2e, 0x2a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x65, 0x65, 0x72, 0x4a, 0x0b, 0x0a,
	0x03, 0x32, 0x30, 0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x4a, 0x20, 0x0a, 0x03, 0x34, 0x30,
	0x30, 0x12, 0x19, 0x0a, 0x0b, 0x42, 0x61, 0x64, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0a, 0x0a, 0x08, 0x1a, 0x06, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4a, 0x21, 0x0a, 0x03,
	0x34, 0x30, 0x31, 0x12, 0x1a, 0x0a, 0x0c, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x64, 0x12, 0x0a, 0x0a, 0x08, 0x1a, 0x06, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4a,
	0x1e, 0x0a, 0x03, 0x34, 0x30, 0x33, 0x12, 0x17, 0x0a, 0x09, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64,
	0x64, 0x65, 0x6e, 0x12, 0x0a, 0x0a, 0x08, 0x1a, 0x06, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4a,
	0x1e, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x17, 0x0a, 0x09, 0x4e, 0x6f, 0x74, 0x20, 0x66, 0x6f,
	0x75, 0x6e, 0x64, 0x12, 0x0a, 0x0a, 0x08, 0x1a, 0x06, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4a,
	0x29, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x10, 0x55, 0x6e,
	0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x0a,
	0x0a, 0x08, 0x1a, 0x06, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0xe7, 0x01, 0x0a, 0x08, 0x47,
	0x65, 0x74, 0x42, 0x65, 0x65, 0x72, 0x73, 0x12, 0x10, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x65, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x47, 0x65, 0x74, 0x42,
	0x65, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb5, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x62,
	0x65, 0x65, 0x72, 0x73, 0x92, 0x41, 0x9c, 0x01, 0x0a, 0x05, 0x62, 0x65, 0x65, 0x72, 0x73, 0x12,
	0x0e, 0x47, 0x65, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x65, 0x72, 0x73, 0x2e, 0x2a,
	0x08, 0x67, 0x65, 0x74, 0x42, 0x65, 0x65, 0x72, 0x73, 0x4a, 0x0b, 0x0a, 0x03, 0x32, 0x30, 0x30,
	0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x4a, 0x21, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12, 0x1a, 0x0a,
	0x0c, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x0a, 0x0a,
	0x08, 0x1a, 0x06, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4a, 0x1e, 0x0a, 0x03, 0x34, 0x30, 0x33,
	0x12, 0x17, 0x0a, 0x09, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x0a, 0x0a,
	0x08, 0x1a, 0x06, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4a, 0x29, 0x0a, 0x07, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x10, 0x55, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x0a, 0x0a, 0x08, 0x1a, 0x06, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x42, 0x8e, 0x02, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x76, 0x77, 0x65, 0x6c, 0x6c, 0x73, 0x2f, 0x67, 0x72, 0x70, 0x63,
	0x2d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2d, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x65, 0x65, 0x72, 0x73, 0x92, 0x41, 0xd5, 0x01,
	0x12, 0xaa, 0x01, 0x0a, 0x08, 0x42, 0x65, 0x65, 0x72, 0x20, 0x41, 0x50, 0x49, 0x12, 0x46, 0x54,
	0x68, 0x65, 0x20, 0x62, 0x65, 0x65, 0x72, 0x20, 0x41, 0x50, 0x49, 0x20, 0x63, 0x6f, 0x6e, 0x73,
	0x69, 0x73, 0x74, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x73, 0x65, 0x74, 0x20, 0x6f, 0x66,
	0x20, 0x41, 0x50, 0x49, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x62, 0x65, 0x65, 0x72, 0x20, 0x63, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x75, 0x65, 0x2e, 0x22, 0x51, 0x0a, 0x09, 0x42, 0x65, 0x6e, 0x20, 0x57, 0x65, 0x6c,
	0x6c, 0x73, 0x12, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x76, 0x77, 0x65, 0x6c, 0x6c, 0x73, 0x2f, 0x67,
	0x72, 0x70, 0x63, 0x2d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2d, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x1a, 0x13, 0x62, 0x2e, 0x76, 0x2e, 0x77, 0x65, 0x6c, 0x6c, 0x73, 0x40, 0x67,
	0x6d, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x32, 0x03, 0x31, 0x2e, 0x30, 0x2a, 0x02, 0x01,
	0x02, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a,
	0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_proto_rawDescOnce sync.Once
	file_api_proto_rawDescData = file_api_proto_rawDesc
)

func file_api_proto_rawDescGZIP() []byte {
	file_api_proto_rawDescOnce.Do(func() {
		file_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_proto_rawDescData)
	})
	return file_api_proto_rawDescData
}

var file_api_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_api_proto_goTypes = []interface{}{
	(Type)(0),                    // 0: Type
	(*Beer)(nil),                 // 1: Beer
	(*CreateBeerRequest)(nil),    // 2: CreateBeerRequest
	(*CreateBeerResponse)(nil),   // 3: CreateBeerResponse
	(*GetBeerRequest)(nil),       // 4: GetBeerRequest
	(*GetBeerResponse)(nil),      // 5: GetBeerResponse
	(*UpdateBeerRequest)(nil),    // 6: UpdateBeerRequest
	(*UpdateBeerResponse)(nil),   // 7: UpdateBeerResponse
	(*DeleteBeerRequest)(nil),    // 8: DeleteBeerRequest
	(*DeleteBeerResponse)(nil),   // 9: DeleteBeerResponse
	(*GetBeersRequest)(nil),      // 10: GetBeersRequest
	(*GetBeersResponse)(nil),     // 11: GetBeersResponse
	(*Error)(nil),                // 12: Error
	(*field_mask.FieldMask)(nil), // 13: google.protobuf.FieldMask
}
var file_api_proto_depIdxs = []int32{
	0,  // 0: Beer.type:type_name -> Type
	0,  // 1: CreateBeerRequest.type:type_name -> Type
	1,  // 2: CreateBeerResponse.beer:type_name -> Beer
	1,  // 3: GetBeerResponse.beer:type_name -> Beer
	1,  // 4: UpdateBeerRequest.beer:type_name -> Beer
	13, // 5: UpdateBeerRequest.update_mask:type_name -> google.protobuf.FieldMask
	1,  // 6: UpdateBeerResponse.beer:type_name -> Beer
	1,  // 7: GetBeersResponse.beers:type_name -> Beer
	2,  // 8: BeerService.CreateBeer:input_type -> CreateBeerRequest
	4,  // 9: BeerService.GetBeer:input_type -> GetBeerRequest
	6,  // 10: BeerService.UpdateBeer:input_type -> UpdateBeerRequest
	8,  // 11: BeerService.DeleteBeer:input_type -> DeleteBeerRequest
	10, // 12: BeerService.GetBeers:input_type -> GetBeersRequest
	3,  // 13: BeerService.CreateBeer:output_type -> CreateBeerResponse
	5,  // 14: BeerService.GetBeer:output_type -> GetBeerResponse
	7,  // 15: BeerService.UpdateBeer:output_type -> UpdateBeerResponse
	9,  // 16: BeerService.DeleteBeer:output_type -> DeleteBeerResponse
	11, // 17: BeerService.GetBeers:output_type -> GetBeersResponse
	13, // [13:18] is the sub-list for method output_type
	8,  // [8:13] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_api_proto_init() }
func file_api_proto_init() {
	if File_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Beer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBeerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBeerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBeerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBeerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBeerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBeerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBeerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBeerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBeersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBeersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_proto_goTypes,
		DependencyIndexes: file_api_proto_depIdxs,
		EnumInfos:         file_api_proto_enumTypes,
		MessageInfos:      file_api_proto_msgTypes,
	}.Build()
	File_api_proto = out.File
	file_api_proto_rawDesc = nil
	file_api_proto_goTypes = nil
	file_api_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BeerServiceClient is the client API for BeerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BeerServiceClient interface {
	// CreateBeer creates a beer.
	CreateBeer(ctx context.Context, in *CreateBeerRequest, opts ...grpc.CallOption) (*CreateBeerResponse, error)
	// GetBeer gets a beer given its ID.
	GetBeer(ctx context.Context, in *GetBeerRequest, opts ...grpc.CallOption) (*GetBeerResponse, error)
	// UpdateBeer updates a beer given its ID.
	UpdateBeer(ctx context.Context, in *UpdateBeerRequest, opts ...grpc.CallOption) (*UpdateBeerResponse, error)
	// DeleteBeer deletes a beer given its ID.
	DeleteBeer(ctx context.Context, in *DeleteBeerRequest, opts ...grpc.CallOption) (*DeleteBeerResponse, error)
	// GetBeers gets beers.
	GetBeers(ctx context.Context, in *GetBeersRequest, opts ...grpc.CallOption) (*GetBeersResponse, error)
}

type beerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBeerServiceClient(cc grpc.ClientConnInterface) BeerServiceClient {
	return &beerServiceClient{cc}
}

func (c *beerServiceClient) CreateBeer(ctx context.Context, in *CreateBeerRequest, opts ...grpc.CallOption) (*CreateBeerResponse, error) {
	out := new(CreateBeerResponse)
	err := c.cc.Invoke(ctx, "/BeerService/CreateBeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beerServiceClient) GetBeer(ctx context.Context, in *GetBeerRequest, opts ...grpc.CallOption) (*GetBeerResponse, error) {
	out := new(GetBeerResponse)
	err := c.cc.Invoke(ctx, "/BeerService/GetBeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beerServiceClient) UpdateBeer(ctx context.Context, in *UpdateBeerRequest, opts ...grpc.CallOption) (*UpdateBeerResponse, error) {
	out := new(UpdateBeerResponse)
	err := c.cc.Invoke(ctx, "/BeerService/UpdateBeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beerServiceClient) DeleteBeer(ctx context.Context, in *DeleteBeerRequest, opts ...grpc.CallOption) (*DeleteBeerResponse, error) {
	out := new(DeleteBeerResponse)
	err := c.cc.Invoke(ctx, "/BeerService/DeleteBeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beerServiceClient) GetBeers(ctx context.Context, in *GetBeersRequest, opts ...grpc.CallOption) (*GetBeersResponse, error) {
	out := new(GetBeersResponse)
	err := c.cc.Invoke(ctx, "/BeerService/GetBeers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BeerServiceServer is the server API for BeerService service.
type BeerServiceServer interface {
	// CreateBeer creates a beer.
	CreateBeer(context.Context, *CreateBeerRequest) (*CreateBeerResponse, error)
	// GetBeer gets a beer given its ID.
	GetBeer(context.Context, *GetBeerRequest) (*GetBeerResponse, error)
	// UpdateBeer updates a beer given its ID.
	UpdateBeer(context.Context, *UpdateBeerRequest) (*UpdateBeerResponse, error)
	// DeleteBeer deletes a beer given its ID.
	DeleteBeer(context.Context, *DeleteBeerRequest) (*DeleteBeerResponse, error)
	// GetBeers gets beers.
	GetBeers(context.Context, *GetBeersRequest) (*GetBeersResponse, error)
}

// UnimplementedBeerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBeerServiceServer struct {
}

func (*UnimplementedBeerServiceServer) CreateBeer(context.Context, *CreateBeerRequest) (*CreateBeerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBeer not implemented")
}
func (*UnimplementedBeerServiceServer) GetBeer(context.Context, *GetBeerRequest) (*GetBeerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBeer not implemented")
}
func (*UnimplementedBeerServiceServer) UpdateBeer(context.Context, *UpdateBeerRequest) (*UpdateBeerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBeer not implemented")
}
func (*UnimplementedBeerServiceServer) DeleteBeer(context.Context, *DeleteBeerRequest) (*DeleteBeerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBeer not implemented")
}
func (*UnimplementedBeerServiceServer) GetBeers(context.Context, *GetBeersRequest) (*GetBeersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBeers not implemented")
}

func RegisterBeerServiceServer(s *grpc.Server, srv BeerServiceServer) {
	s.RegisterService(&_BeerService_serviceDesc, srv)
}

func _BeerService_CreateBeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeerServiceServer).CreateBeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BeerService/CreateBeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeerServiceServer).CreateBeer(ctx, req.(*CreateBeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeerService_GetBeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeerServiceServer).GetBeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BeerService/GetBeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeerServiceServer).GetBeer(ctx, req.(*GetBeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeerService_UpdateBeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeerServiceServer).UpdateBeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BeerService/UpdateBeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeerServiceServer).UpdateBeer(ctx, req.(*UpdateBeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeerService_DeleteBeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeerServiceServer).DeleteBeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BeerService/DeleteBeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeerServiceServer).DeleteBeer(ctx, req.(*DeleteBeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeerService_GetBeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBeersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeerServiceServer).GetBeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BeerService/GetBeers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeerServiceServer).GetBeers(ctx, req.(*GetBeersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BeerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "BeerService",
	HandlerType: (*BeerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBeer",
			Handler:    _BeerService_CreateBeer_Handler,
		},
		{
			MethodName: "GetBeer",
			Handler:    _BeerService_GetBeer_Handler,
		},
		{
			MethodName: "UpdateBeer",
			Handler:    _BeerService_UpdateBeer_Handler,
		},
		{
			MethodName: "DeleteBeer",
			Handler:    _BeerService_DeleteBeer_Handler,
		},
		{
			MethodName: "GetBeers",
			Handler:    _BeerService_GetBeers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
